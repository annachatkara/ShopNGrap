datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String
  phone        String?
  role         String    @default("customer") // customer, admin, superuser
  isActive     Boolean   @default(true)
  isBlocked    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  addresses    Address[]
  cart         Cart[]
  orders       Order[]
  reviews      Review[]
  wishlist     Wishlist[]
  adminLogs    AdminLog[]
  
  // Admin specific relations
  shop         Shop?     @relation("ShopAdmin")
  blockedBy    User?     @relation("BlockedUsers", fields: [blockedById], references: [id])
  blockedById  Int?
  blockedUsers User[]    @relation("BlockedUsers")
}

model Shop {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  isActive    Boolean  @default(true)    // Shop active/inactive status
  isVisible   Boolean  @default(true)    // Controls if customers can see shop products
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  admin       User     @relation("ShopAdmin", fields: [adminId], references: [id])
  adminId     Int      @unique
  products    Product[]
  categories  Category[]
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  fullName   String
  phone      String?
  pincode    String
  street     String
  city       String
  state      String
  country    String   @default("India")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  orders     Order[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      Int
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([name, shopId])
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      Int
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  cart        Cart[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishlist    Wishlist[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
}

model Order {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  address     Address      @relation(fields: [addressId], references: [id])
  addressId   Int
  totalAmount Float
  status      String       @default("pending") // pending, confirmed, shipped, delivered, cancelled
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]
  payments    Payment[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float    // Price at time of order
}

model Payment {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  paymentId String?
  method    String?
  amount    Float
  status    String   @default("pending") // pending, completed, failed, refunded
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  rating    Int      @db.SmallInt // 1-5 rating
  comment   String?
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  type       String   @default("percentage") // percentage, fixed
  expiryDate DateTime
  minOrder   Float    @default(0)
  maxDiscount Float?  // Maximum discount amount for percentage type
  usageLimit Int?     // Maximum number of times coupon can be used
  usedCount  Int      @default(0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
}

model AdminLog {
  id        Int      @id @default(autoincrement())
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int
  action    String   // e.g., "CREATED_PRODUCT", "BLOCKED_USER", "UPDATED_SHOP"
  details   String?  // Additional details about the action
  targetId  Int?     // ID of the target entity (product, user, shop, etc.)
  targetType String? // Type of target entity (product, user, shop, etc.)
  createdAt DateTime @default(now())
}
