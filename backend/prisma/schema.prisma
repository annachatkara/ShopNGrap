generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  RESERVED
  PAID
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  passwordHash    String
  firstName       String
  lastName        String
  phoneNumber     String?
  role            UserRole         @default(BUYER)
  isVerified      Boolean          @default(false) // New Field: OTP or Email Verified
  verifiedAt      DateTime? // Timestamp of verification
  shops           Shop[] // Shops owned (if seller)
  orders          Order[] // Orders/bookings made
  userPreferences UserPreferences?
  userSessions    UserSession[]
  passwordResets  PasswordReset[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Shop {
  id          String    @id @default(cuid())
  name        String
  address     String
  description String?
  imageUrl    String?
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  items       Item[]
  isVerified  Boolean   @default(false) // New Field: Shop verified status
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Item {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  quantity    Int // In stock
  shopId      String
  shop        Shop        @relation(fields: [shopId], references: [id])
  imageUrl    String?
  isActive    Boolean     @default(true)
  isVerified  Boolean     @default(false) // New Field: Item verification (optional)
  verifiedAt  DateTime?
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  reservedUntil DateTime? // Reservation expiry
  payment       Payment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  itemId   String
  quantity Int
  order    Order  @relation(fields: [orderId], references: [id])
  item     Item   @relation(fields: [itemId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Float
  status        PaymentStatus
  provider      String // e.g., Stripe, Razorpay
  transactionId String?
  paidAt        DateTime?
  receiptUrl    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model UserPreferences {
  id                 String     @id @default(cuid())
  userId             String     @unique
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean    @default(true)
  pushNotifications  Boolean    @default(true)
  smsNotifications   Boolean    @default(false)
  profileVisibility  Visibility @default(PUBLIC)
  allowMessaging     Boolean    @default(true)
  allowTagging       Boolean    @default(true)
  language           String     @default("en")
  timezone           String     @default("UTC")
  theme              Theme      @default(LIGHT)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("user_preferences")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  refreshToken String?  @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastUsedAt   DateTime @default(now())

  @@map("user_sessions")
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String    @unique
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  @@map("password_resets")
}

model AppConfig {
  id          String     @id @default(cuid())
  key         String     @unique
  value       String
  type        ConfigType @default(STRING)
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("app_config")
}
